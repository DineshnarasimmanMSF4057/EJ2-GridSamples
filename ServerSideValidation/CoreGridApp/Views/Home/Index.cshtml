<div id="Grid"></div>
@{
    var data = ViewBag.datasource;
}

<script id="dialogtemplate" type="text/x-template">
    <div>
        <div class="form-row">
            <div class="form-group col-md-6">
                <div class="e-float-input e-control-wrapper">
                    <input id="OrderID" name="OrderID" type="text" value="${orderID}" ${if(isAdd)} ${else} disabled ${/if} />
                    <span class="e-float-line"></span>
                    <label class="e-float-text e-label-top" for="OrderID">Order ID</label>
                </div>
            </div>
            <div class="form-group col-md-6">
                <div class="e-float-input e-control-wrapper">
                    <input id="CustomerID" name="CustomerID" type="text" value="${customerID}" />
                    <span class="e-float-line"></span>
                    <label class="e-float-text e-label-top" for="CustomerID">Customer ID</label>
                </div>
            </div>
        </div>
        <div class="form-row">
            <div class="form-group col-md-6">
                <input name="Freight" id="freight" value="${freight}" />
            </div>
        </div>


    </div>
</script>
<script>
    var grid = new ej.grids.Grid({
        dataSource: new ej.data.DataManager({
            json: @Html.Raw(Json.Serialize(@ViewBag.dataSource)),
            updateUrl: "Home/Update",
            adaptor: new ej.data.RemoteSaveAdaptor()
        }),
        allowPaging: true,
        pageSettings: { pageCount: 5 },
        allowSorting: true,
        toolbar: ['Add', 'Edit', 'Delete'],
        editSettings: { allowEditing: true, allowAdding: true, allowDeleting: true, mode: 'Dialog', template: '#dialogtemplate' },
        columns: [
            {
                field: 'OrderID', isPrimaryKey: true, headerText: 'Order ID', textAlign: 'Right',
                validationRules: { required: true, number: true }, width: 120, defaultValue: ''
            },
            {
                field: 'CustomerID', headerText: 'Customer ID',
                validationRules: { required: true }, width: 140, defaultValue: ''
            },
            {
                field: 'Freight', headerText: 'Freight', textAlign: 'Right', editType: 'numericedit', validationRules: { required: true, minLength: [customFn, 'Checking....'] },
                width: 120,
            },
        ],
        actionComplete: function (args) {
            if ((args.requestType === 'beginEdit' || args.requestType === 'add')) {
                var data = args.rowData;
                // Convert Widget for the Freight field
                new ej.inputs.NumericTextBox({ value: data.freight, format: 'C2', placeholder: 'Freight', floatLabelType: 'Always' },
                    args.form.elements.namedItem('freight'));
                // Set initail Focus
                if (args.requestType === 'beginEdit') {
                    args.form.elements.namedItem('CustomerID').focus();
                } else {
                    args.form.elements.namedItem('OrderID').focus();
                }
            }
        }
    });
    grid.appendTo('#Grid');




    var value;
    var validationflag = false;
    var saveflag = false
    var rfinal = false;

    function customFn(args) {
        let finalvalue = parseInt(args['value'], 10);
        if (saveflag) {
            saveflag = false
            return true;
        }
        if (validationflag == true) {
            rfinal = true;
            validationflag = false;
        } else {
            rfinal = false;
            let ajax = new ej.base.Ajax("/Home/getStatus", "POST", true); // call API  
            ajax.send(JSON.stringify({ EmployeeID: finalvalue }));
            // Then we change the validation message content based on ajax return value in the ajax.onSuccess function  
            ajax.onSuccess = function (data) {
                var gridInstance = document.getElementById('Grid').ej2_instances[0] // Grid Instances  
                value = JSON.parse(data); // declaring the ajax return value  
                if (value.result === true) {  // check the status  
                    validationflag = true;
                    saveflag = true;
                    gridInstance.editModule.formObj.validate()
                } else {
                    if (gridInstance.editModule.formObj.element.children[1]) {

                        gridInstance.editModule.formObj.element.children[1].querySelector('.e-tip-content').innerText = value.customText
                    }
                    validationflag = false;
                }
            };

        }
        return rfinal;
    };

</script>